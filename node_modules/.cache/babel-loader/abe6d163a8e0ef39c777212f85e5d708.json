{"ast":null,"code":"import t from \"react\";\n\nfunction e(t, e, s) {\n  return e in t ? Object.defineProperty(t, e, {\n    value: s,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : t[e] = s, t;\n}\n\nconst s = \"undefined\" != typeof window ? window : global,\n      a = s.requestAnimationFrame ? s.requestAnimationFrame.bind(s) : t => s.setTimeout(t, 16),\n      i = s.cancelAnimationFrame ? s.cancelAnimationFrame.bind(s) : s.clearInterval.bind(s),\n      o = Object.freeze({\n  EXPANDED: \"EXPANDED\",\n  COLLAPSED: \"COLLAPSED\",\n  EXPANDING: \"EXPANDING\",\n  COLLAPSING: \"COLLAPSING\"\n}),\n      l = t => t < .5 ? 4 * t * t * t : .5 * Math.pow(2 * t - 2, 3) + 1,\n      h = t => t === o.EXPANDING || t === o.COLLAPSING,\n      r = ({\n  value: t,\n  max: e = 1,\n  min: s = 0\n}) => t > e ? e : t < s ? s : t,\n      p = () => Date.now(),\n      n = t => Math.max(0, parseInt(+t, 10) || 0),\n      g = ({\n  next: t,\n  prev: e\n}) => {\n  const s = Math.abs(t - e);\n  let a = t;\n  return s > .15 && (t > e ? a -= .75 * s : a += .75 * s), a;\n};\n\nclass d extends t.Component {\n  constructor(...t) {\n    super(...t), e(this, \"_state_\", {\n      collapsibleElement: null,\n      toggleState: this.props.collapsed ? o.COLLAPSED : o.EXPANDED\n    }), e(this, \"GET_HEIGHT\", this.props.offsetHeight ? \"offsetHeight\" : \"scrollHeight\"), e(this, \"state\", {\n      toggleState: this._state_.toggleState,\n      hasReversed: !1,\n      range: this.props.collapsed ? 0 : 1,\n      progress: this.props.collapsed ? 0 : 1\n    }), e(this, \"getCollapsible\", () => this._state_.collapsibleElement), e(this, \"updateCollapsible\", (t, e) => {\n      this.getCollapsible() && (this._state_.collapsibleElement.style[t] = e);\n    }), e(this, \"setCollapsibleElement\", t => {\n      this._state_.collapsibleElement = t, this._state_.collapsibleElement && !this.props.noOverflowHidden && (this._state_.collapsibleElement.style.overflow = \"hidden\"), this._state_.toggleState === o.COLLAPSED && this.setCollapsedState({\n        initialState: !0\n      });\n    }), e(this, \"toggle\", () => {\n      if (this.props.irreversible && h(this._state_.toggleState)) return;\n\n      const t = () => {\n        this.props.onCollapsing && this.props.onCollapsing({\n          range: this.state.range,\n          progress: this.state.progress,\n          hasReversed: this.state.hasReversed\n        }), this.collapse();\n      },\n            e = () => {\n        this.props.onExpanding && this.props.onExpanding({\n          range: this.state.range,\n          progress: this.state.progress,\n          hasReversed: this.state.hasReversed\n        }), this.expand();\n      },\n            s = ({\n        toggleState: t,\n        display: e,\n        hasReversed: s\n      }) => {\n        this._state_.toggleState = t, this._state_.hasReversed = !!s, void 0 === e || this.props.noDisplayStyle || this.updateCollapsible(\"display\", e);\n        const a = p();\n\n        if (s) {\n          const {\n            startTime: t\n          } = this._state_,\n                e = n(this.props.duration),\n                s = Math.min(e, a - t),\n                i = Math.max(0, e - s);\n          this._state_.startTime = a - i;\n        } else {\n          const e = this.getCollapsible();\n          e && e.style.height && this.updateCollapsible(\"height\", null), this._state_.boxHeight = e ? e[this.GET_HEIGHT] : 0, this._state_.startTime = a, this._state_.startDirection = t;\n        }\n\n        this.setState({\n          toggleState: this._state_.toggleState,\n          hasReversed: this._state_.hasReversed\n        });\n      };\n\n      switch (this._state_.toggleState) {\n        case o.EXPANDED:\n          s({\n            toggleState: o.COLLAPSING\n          }), t();\n          break;\n\n        case o.COLLAPSED:\n          s({\n            toggleState: o.EXPANDING,\n            display: \"\"\n          }), e();\n          break;\n\n        case o.EXPANDING:\n          s({\n            toggleState: o.COLLAPSING,\n            hasReversed: !0\n          }), t();\n          break;\n\n        case o.COLLAPSING:\n          s({\n            toggleState: o.EXPANDING,\n            display: \"\",\n            hasReversed: !0\n          }), e();\n      }\n    }), e(this, \"setExpandedState\", () => {\n      this._state_.progress = 1, this._state_.toggleState = o.EXPANDED, this.updateCollapsible(\"height\", null), this.setState({\n        toggleState: o.EXPANDED,\n        range: 1,\n        progress: this._state_.progress\n      }), this.props.onExpanded && this.props.onExpanded({\n        hasReversed: this.state.hasReversed\n      });\n    }), e(this, \"expand\", () => {\n      if (this._state_.toggleState !== o.EXPANDING) return;\n      const t = n(this.props.duration);\n      if (t <= 0) return void this.setExpandedState();\n      const {\n        startTime: e\n      } = this._state_,\n            s = Math.min(t, p() - e);\n      if (s >= t) this.setExpandedState();else {\n        const {\n          startDirection: e,\n          toggleState: a,\n          boxHeight: i\n        } = this._state_,\n              o = r({\n          value: s / t\n        });\n        let l;\n        l = this.props.whenReversedUseBackwardEase && e !== a ? 1 - this.props.easeCollapse(1 - o) : this.props.easeExpand(o), this.props.bestPerformance || this.setState({\n          range: o,\n          progress: l\n        }), this.props.interpolateOnReverse && this._state_.hasReversed && (l = g({\n          next: l,\n          prev: this._state_.progress\n        }));\n        const h = Math.round(i * l);\n        this._state_.progress = l, this.updateCollapsible(\"height\", `${h}px`), this.nextTick(this.expand);\n      }\n    }), e(this, \"setCollapsedState\", ({\n      initialState: t\n    } = {}) => {\n      this._state_.progress = 0, this._state_.toggleState = o.COLLAPSED, this.props.noDisplayStyle ? this.updateCollapsible(\"height\", \"0px\") : (this.updateCollapsible(\"display\", \"none\"), this.updateCollapsible(\"height\", null)), this.setState({\n        toggleState: o.COLLAPSED,\n        range: 0,\n        progress: this._state_.progress\n      }), !t && this.props.onCollapsed && this.props.onCollapsed({\n        hasReversed: this.state.hasReversed\n      });\n    }), e(this, \"collapse\", () => {\n      if (this._state_.toggleState !== o.COLLAPSING) return;\n      const t = n(this.props.duration);\n      if (t <= 0) return void this.setCollapsedState();\n      const {\n        startTime: e\n      } = this._state_,\n            s = Math.min(t, p() - e);\n      if (s >= t) this.setCollapsedState();else {\n        const {\n          startDirection: e,\n          boxHeight: a,\n          toggleState: i\n        } = this._state_,\n              o = 1 - r({\n          value: s / t\n        }),\n              {\n          whenReversedUseBackwardEase: l,\n          easeExpand: h,\n          easeCollapse: p\n        } = this.props;\n        let n;\n        n = l && e !== i ? h(o) : 1 - p(1 - o), this.props.bestPerformance || this.setState({\n          range: o,\n          progress: n\n        }), this.props.interpolateOnReverse && this._state_.hasReversed && (n = g({\n          next: n,\n          prev: this._state_.progress\n        }));\n        const d = Math.round(a * n);\n        this._state_.progress = n, this._state_.timeout = this.nextTick(this.collapse), this.updateCollapsible(\"height\", `${d}px`);\n      }\n    }), e(this, \"nextTick\", t => {\n      this._state_.timeout = a(t);\n    });\n  }\n\n  render() {\n    const t = {\n      onToggle: this.toggle,\n      toggle: this.toggle,\n      setCollapsibleElement: this.setCollapsibleElement,\n      toggleState: this.state.toggleState,\n      hasReversed: this.state.hasReversed,\n      isMoving: h(this.state.toggleState),\n      range: this.state.range,\n      progress: this.state.progress\n    };\n    return \"function\" == typeof this.props.children ? this.props.children(t) : this.props.render ? this.props.render(t) : this.props.children;\n  }\n\n  componentDidMount() {\n    this.props.onMount && this.props.onMount({\n      toggleState: this.state.toggleState,\n      toggle: this.toggle\n    });\n  }\n\n  componentDidUpdate(t, e) {\n    this.props.collapseEvent && this.props.collapseEvent > t.collapseEvent && (this._state_.toggleState !== o.EXPANDED && this._state_.toggleState !== o.EXPANDING || this.toggle()), this.props.expandEvent && this.props.expandEvent > t.expandEvent && (this._state_.toggleState !== o.COLLAPSED && this._state_.toggleState !== o.COLLAPSING || this.toggle()), this.props.toggleEvent && this.props.toggleEvent > t.toggleEvent && this.toggle();\n  }\n\n  componentWillUnmount() {\n    this.props.onUnmount && this.props.onUnmount({\n      toggleState: this.state.toggleState\n    }), this._state_.timeout && i(this._state_.timeout);\n  }\n\n}\n\ne(d, \"defaultProps\", {\n  duration: 300,\n  easeCollapse: l,\n  easeExpand: l\n});\nexport default d;","map":{"version":3,"sources":["../src/library/SlideToggle.js"],"names":["root","window","global","rAF","requestAnimationFrame","bind","callback","setTimeout","cAF","cancelAnimationFrame","clearInterval","TOGGLE","Object","freeze","EXPANDED","COLLAPSED","EXPANDING","COLLAPSING","easeInOutCubic","t","Math","pow","util","toggleState","value","max","min","Date","now","duration","parseInt","next","prev","diff","abs","interpolated","SlideToggle","React","Component","easeCollapse","easeExpand","collapsibleElement","this","props","collapsed","offsetHeight","_state_","hasReversed","range","progress","render","data","onToggle","toggle","setCollapsibleElement","state","isMoving","children","attr","getCollapsible","style","element","noOverflowHidden","overflow","setCollapsedState","initialState","irreversible","invokeCollapsing","onCollapsing","collapse","invokeExpanding","onExpanding","expand","updateInternalState","display","undefined","noDisplayStyle","updateCollapsible","startTime","elapsedTime","subtract","collapsible","height","boxHeight","GET_HEIGHT","startDirection","setState","onExpanded","setExpandedState","whenReversedUseBackwardEase","bestPerformance","interpolateOnReverse","currentHeightValue","round","nextTick","onCollapsed","timeout","componentDidMount","onMount","componentDidUpdate","prevProps","prevState","collapseEvent","expandEvent","toggleEvent","componentWillUnmount","onUnmount"],"mappings":"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","sourcesContent":["/*\n  _state_ is internal state for sync and rendering control.\n  setState is async and I need sync control because timing is important\n  and because I need to control what is to be re-rendered.\n*/\n\nimport React from 'react';\n//import PropTypes from 'prop-types';\n\n// Support browser or node env\nconst root = typeof window !== 'undefined' ? window : global;\nconst rAF = root.requestAnimationFrame\n  ? root.requestAnimationFrame.bind(root)\n  : callback => root.setTimeout(callback, 16);\nconst cAF = root.cancelAnimationFrame\n  ? root.cancelAnimationFrame.bind(root)\n  : root.clearInterval.bind(root);\n\nconst TOGGLE = Object.freeze({\n  EXPANDED: 'EXPANDED',\n  COLLAPSED: 'COLLAPSED',\n  EXPANDING: 'EXPANDING',\n  COLLAPSING: 'COLLAPSING',\n});\n\nconst easeInOutCubic = t =>\n  t < 0.5 ? 4 * t * t * t : 0.5 * Math.pow(2 * t - 2, 3) + 1;\n\nconst util = {\n  isMoving: toggleState =>\n    toggleState === TOGGLE.EXPANDING || toggleState === TOGGLE.COLLAPSING,\n  clamp: ({ value, max = 1, min = 0 }) => {\n    if (value > max) return max;\n    if (value < min) return min;\n    return value;\n  },\n  now: () => Date.now(),\n  sanitizeDuration: duration => Math.max(0, parseInt(+duration, 10) || 0),\n  interpolate: ({ next, prev }) => {\n    /*\n      If the diff in the next rAF is big, it can seem jumpy when reversing the toggling\n      This is heuristic approach to minimize the diff value by interpolating.\n    */\n    const diff = Math.abs(next - prev);\n    let interpolated = next;\n    if (diff > 0.15) {\n      /* heuristic value */\n      if (next > prev) interpolated -= diff * 0.75;\n      /* heuristic value */ else\n        interpolated += diff * 0.75; /* heuristic value */\n    }\n    return interpolated;\n  },\n};\n\nexport default class SlideToggle extends React.Component {\n  static defaultProps = {\n    duration: 300,\n    easeCollapse: easeInOutCubic,\n    easeExpand: easeInOutCubic,\n  };\n\n  // Internal state\n  _state_ = {\n    collapsibleElement: null,\n    toggleState: this.props.collapsed ? TOGGLE.COLLAPSED : TOGGLE.EXPANDED,\n  };\n\n  GET_HEIGHT = this.props.offsetHeight ? 'offsetHeight' : 'scrollHeight';\n\n  // React state\n  state = {\n    toggleState: this._state_.toggleState,\n    hasReversed: false,\n    range: this.props.collapsed ? 0 : 1,\n    progress: this.props.collapsed ? 0 : 1,\n  };\n\n  render() {\n    const data = {\n      onToggle: this.toggle, // deprecated\n      toggle: this.toggle,\n      setCollapsibleElement: this.setCollapsibleElement,\n      toggleState: this.state.toggleState,\n      hasReversed: this.state.hasReversed,\n      isMoving: util.isMoving(this.state.toggleState),\n      range: this.state.range,\n      progress: this.state.progress,\n    };\n\n    if (typeof this.props.children === 'function')\n      return this.props.children(data);\n    if (this.props.render) return this.props.render(data);\n\n    return this.props.children;\n  }\n\n  getCollapsible = () => this._state_.collapsibleElement;\n\n  updateCollapsible = (attr, value) => {\n    if (this.getCollapsible()) {\n      this._state_.collapsibleElement.style[attr] = value;\n    }\n  };\n\n  setCollapsibleElement = element => {\n    this._state_.collapsibleElement = element;\n    if (this._state_.collapsibleElement && !this.props.noOverflowHidden) {\n      this._state_.collapsibleElement.style.overflow = 'hidden';\n    }\n    if (this._state_.toggleState === TOGGLE.COLLAPSED) {\n      this.setCollapsedState({ initialState: true });\n    }\n  };\n\n  toggle = () => {\n    if (this.props.irreversible && util.isMoving(this._state_.toggleState)) {\n      return;\n    }\n\n    const invokeCollapsing = () => {\n      this.props.onCollapsing &&\n        this.props.onCollapsing({\n          range: this.state.range,\n          progress: this.state.progress,\n          hasReversed: this.state.hasReversed,\n        });\n\n      this.collapse();\n    };\n    const invokeExpanding = () => {\n      this.props.onExpanding &&\n        this.props.onExpanding({\n          range: this.state.range,\n          progress: this.state.progress,\n          hasReversed: this.state.hasReversed,\n        });\n\n      this.expand();\n    };\n\n    const updateInternalState = ({ toggleState, display, hasReversed }) => {\n      this._state_.toggleState = toggleState;\n      this._state_.hasReversed = !!hasReversed;\n\n      if (display !== undefined && !this.props.noDisplayStyle) {\n        this.updateCollapsible('display', display);\n      }\n\n      const now = util.now();\n\n      if (hasReversed) {\n        const { startTime } = this._state_;\n        const duration = util.sanitizeDuration(this.props.duration);\n        const elapsedTime = Math.min(duration, now - startTime);\n        const subtract = Math.max(0, duration - elapsedTime);\n        this._state_.startTime = now - subtract;\n      } else {\n        const collapsible = this.getCollapsible();\n        if (collapsible && collapsible.style.height) {\n          this.updateCollapsible('height', null);\n        }\n        this._state_.boxHeight = collapsible ? collapsible[this.GET_HEIGHT] : 0;\n        this._state_.startTime = now;\n        this._state_.startDirection = toggleState;\n      }\n\n      this.setState({\n        toggleState: this._state_.toggleState,\n        hasReversed: this._state_.hasReversed,\n      });\n    };\n\n    switch (this._state_.toggleState) {\n      case TOGGLE.EXPANDED:\n        updateInternalState({ toggleState: TOGGLE.COLLAPSING });\n        invokeCollapsing();\n        break;\n      case TOGGLE.COLLAPSED:\n        updateInternalState({\n          toggleState: TOGGLE.EXPANDING,\n          display: '',\n        });\n        invokeExpanding();\n        break;\n      case TOGGLE.EXPANDING:\n        updateInternalState({\n          toggleState: TOGGLE.COLLAPSING,\n          hasReversed: true,\n        });\n        invokeCollapsing();\n        break;\n      case TOGGLE.COLLAPSING:\n        updateInternalState({\n          toggleState: TOGGLE.EXPANDING,\n          display: '',\n          hasReversed: true,\n        });\n        invokeExpanding();\n        break;\n    }\n  };\n\n  setExpandedState = () => {\n    this._state_.progress = 1;\n    this._state_.toggleState = TOGGLE.EXPANDED;\n    this.updateCollapsible('height', null);\n    this.setState({\n      toggleState: TOGGLE.EXPANDED,\n      range: 1,\n      progress: this._state_.progress,\n    });\n    if (this.props.onExpanded) {\n      this.props.onExpanded({\n        hasReversed: this.state.hasReversed,\n      });\n    }\n  };\n\n  expand = () => {\n    if (this._state_.toggleState !== TOGGLE.EXPANDING) {\n      return;\n    }\n\n    const duration = util.sanitizeDuration(this.props.duration);\n    if (duration <= 0) {\n      this.setExpandedState();\n      return;\n    }\n\n    const { startTime } = this._state_;\n    const elapsedTime = Math.min(duration, util.now() - startTime);\n\n    if (elapsedTime >= duration) {\n      this.setExpandedState();\n    } else {\n      const { startDirection, toggleState, boxHeight } = this._state_;\n      const range = util.clamp({ value: elapsedTime / duration });\n\n      let progress;\n      if (\n        this.props.whenReversedUseBackwardEase &&\n        startDirection !== toggleState\n      ) {\n        progress = 1 - this.props.easeCollapse(1 - range);\n      } else {\n        progress = this.props.easeExpand(range);\n      }\n\n      if (!this.props.bestPerformance) {\n        this.setState({\n          range,\n          progress,\n        });\n      }\n\n      if (this.props.interpolateOnReverse && this._state_.hasReversed) {\n        progress = util.interpolate({\n          next: progress,\n          prev: this._state_.progress,\n        });\n      }\n\n      const currentHeightValue = Math.round(boxHeight * progress);\n      this._state_.progress = progress;\n      this.updateCollapsible('height', `${currentHeightValue}px`);\n      this.nextTick(this.expand);\n    }\n  };\n\n  setCollapsedState = ({ initialState } = {}) => {\n    this._state_.progress = 0;\n    this._state_.toggleState = TOGGLE.COLLAPSED;\n\n    if (!this.props.noDisplayStyle) {\n      this.updateCollapsible('display', 'none');\n      this.updateCollapsible('height', null);\n    } else {\n      this.updateCollapsible('height', '0px');\n    }\n\n    this.setState({\n      toggleState: TOGGLE.COLLAPSED,\n      range: 0,\n      progress: this._state_.progress,\n    });\n    if (!initialState && this.props.onCollapsed)\n      this.props.onCollapsed({\n        hasReversed: this.state.hasReversed,\n      });\n  };\n\n  collapse = () => {\n    if (this._state_.toggleState !== TOGGLE.COLLAPSING) {\n      return;\n    }\n    const duration = util.sanitizeDuration(this.props.duration);\n    if (duration <= 0) {\n      this.setCollapsedState();\n      return;\n    }\n\n    const { startTime } = this._state_;\n    const elapsedTime = Math.min(duration, util.now() - startTime);\n\n    if (elapsedTime >= duration) {\n      this.setCollapsedState();\n    } else {\n      const { startDirection, boxHeight, toggleState } = this._state_;\n      const range = 1 - util.clamp({ value: elapsedTime / duration });\n\n      const {\n        whenReversedUseBackwardEase,\n        easeExpand,\n        easeCollapse,\n      } = this.props;\n\n      let progress;\n      if (whenReversedUseBackwardEase && startDirection !== toggleState) {\n        progress = easeExpand(range);\n      } else {\n        progress = 1 - easeCollapse(1 - range);\n      }\n\n      if (!this.props.bestPerformance) {\n        this.setState({\n          range,\n          progress,\n        });\n      }\n\n      if (this.props.interpolateOnReverse && this._state_.hasReversed) {\n        progress = util.interpolate({\n          next: progress,\n          prev: this._state_.progress,\n        });\n      }\n\n      const currentHeightValue = Math.round(boxHeight * progress);\n      this._state_.progress = progress;\n      this._state_.timeout = this.nextTick(this.collapse);\n      this.updateCollapsible('height', `${currentHeightValue}px`);\n    }\n  };\n\n  nextTick = callback => {\n    this._state_.timeout = rAF(callback);\n  };\n\n  componentDidMount() {\n    this.props.onMount &&\n      this.props.onMount({\n        toggleState: this.state.toggleState,\n        toggle: this.toggle,\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.props.collapseEvent &&\n      this.props.collapseEvent > prevProps.collapseEvent\n    ) {\n      if (\n        this._state_.toggleState === TOGGLE.EXPANDED ||\n        this._state_.toggleState === TOGGLE.EXPANDING\n      ) {\n        this.toggle();\n      }\n    }\n    if (\n      this.props.expandEvent &&\n      this.props.expandEvent > prevProps.expandEvent\n    ) {\n      if (\n        this._state_.toggleState === TOGGLE.COLLAPSED ||\n        this._state_.toggleState === TOGGLE.COLLAPSING\n      ) {\n        this.toggle();\n      }\n    }\n    if (\n      this.props.toggleEvent &&\n      this.props.toggleEvent > prevProps.toggleEvent\n    ) {\n      this.toggle();\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.onUnmount &&\n      this.props.onUnmount({\n        toggleState: this.state.toggleState,\n      });\n    this._state_.timeout && cAF(this._state_.timeout);\n  }\n}\n\n// SlideToggle.propTypes = {\n//   render: PropTypes.func,\n//     children: PropTypes.func,\n//     duration: PropTypes.number,\n//     irreversible: PropTypes.bool,\n//     whenReversedUseBackwardEase: PropTypes.bool,\n//     noDisplayStyle: PropTypes.bool,\n//     noOverflowHidden: PropTypes.bool,\n//     bestPerformance: PropTypes.bool,\n//     interpolateOnReverse: PropTypes.bool,\n//     easeCollapse: PropTypes.func,\n//     easeExpand: PropTypes.func,\n//     collapsed: PropTypes.bool,\n//     onExpanded: PropTypes.func,\n//     onExpanding: PropTypes.func,\n//     onCollapsed: PropTypes.func,\n//     onCollapsing: PropTypes.func,\n//     scrollHeight: PropTypes.bool,\n// }\n"]},"metadata":{},"sourceType":"module"}